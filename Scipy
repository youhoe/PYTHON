from scipy import constants
print(dir(constants))



2] Finding the root of the equation x + cos(x) = 0:
from scipy.optimize import root
from math import cos
def eqn(x):
return x + cos(x)
myroot = root(eqn, 0)
print(myroot.x)
OUTPUT:
[-0.73908513]
3] Finding the root using NumPy:
from scipy.optimize import root
import numpy as np
def equation(x):
return x + np.cos(x)
result = root(equation, 0)
print("Root of the equation:", result.x)
OUTPUT:
Root of the equation: [-0.73908513]
4] Solving a system of linear equations:
from scipy import linalg
import numpy as np
a = np.array([[3,2,0], [1,-1,0],[0,5,1]])
b = np.array([2,4,-1])
x = np.linalg.solve(a, b)
print("Solution:", x)
OUTPUT:
Solution: [ 2. -2. 9.]
5] Computing determinant of a matrix:
from scipy import linalg
import numpy as np
a = np.array([[4, 3], [2, 1]])
det = linalg.det(a)
print("Determinant:", det)
OUTPUT:
Determinant: -2.0
6] Computing eigenvalues, eigenvectors, and inverse of a
matrix:
from scipy import linalg
import numpy as np
a = np.array([[4, 3], [2, 1]])
eigenvalues, eigenvectors = linalg.eig(a)
inverse = linalg.inv(a)
print("Eigenvalues:", eigenvalues)
print("Eigenvectors:\n", eigenvectors)
print("Inverse:\n", inverse)
OUTPUT:
Eigenvalues: [ 5.37228132+0.j -0.37228132+0.j]
Eigenvectors:
[[ 0.90937671 -0.56576746]
[ 0.41597356 0.82456484]]
Inverse:
[[-0.5 1.5]
[ 1. -2. ]]
7] Matrix multiplication using dot() and inner() functions:
import numpy as np
a = np.array([[4, 3], [2, 1]])
b = np.array([[1, 2], [3, 4]])
dot_result = np.dot(a, b)
inner_result = np.inner(a, b)
print("Matrix multiplication using dot():\n", dot_result)
print("Matrix multiplication using inner():\n", inner_result)
OUTPUT:
Matrix multiplication using dot():
[[13 20]
[ 5 8]]
Matrix multiplication using inner():
[[10 24]
[ 4 10]]
8] Solving a linear equation Ax = b:
from scipy import linalg
import numpy as np
A = np.array([[4, 3], [2, 1]])
b = np.array([5,6])
x = np.linalg.solve(A, b)
print("Matrix multiplication with vector():\n", x)
OUTPUT:
Matrix multiplication with vector():
[ 6.5 -7. ]
9] Computing the trace of a matrix:
from scipy import linalg
import numpy as np
A = np.array([[4, 3], [2, 1]])
x = np.trace(A)
print("Trace:\n", x)
OUTPUT:
Trace:
5
10] Computing mean and standard deviation using SciPy
stats:
from scipy import stats
data = [10, 20, 30, 40, 50]
mean_value = stats.tmean(data)
std_dev_value = stats.tstd(data)
print("Mean:", mean_value)
print("Standard Deviation:", std_dev_value)
OUTPUT:
Mean: 30.0
