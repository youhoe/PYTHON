import numpy as np
rows=int(input("no of rows"))
columns=int(input("no of columns"))
arr=np.empty((rows,columns),dtype=int)
for i in range(rows):
for j in range(columns):
arr[i,j]=int(input("enter elements:"))
print("array is:")
print(arr)
print(arr.dtype)
print(arr.size)
print(arr.shape)
print(arr.ndim)
print(arr.itemsize)
print(arr[:3])
print(arr[-3:])
print(arr[1:4:2])



a=10
b=9
c="Hello world"
print("value of a=",a)
print("value of b=",b)
print("/nArithmatic operator")
print("Add a+b=",a+b)
print("Sub a-b=",a-b)
print("Multi a*b=",a*b)
print("Div a/b=",a/b)
print("")



import numpy as np
rows = int(input("Enter number of rows: "))
columns = int(input("Enter number of columns: "))
arr = np.empty((rows, columns), dtype=int)
for i in range(rows):
for j in range(columns):
arr[i, j] = int(input(f"Enter element at position ({i}, {j}): "))
print("\nArray is:")
print(arr)
print("\nArray Properties:")
print(f"Data type: {arr.dtype}")
print(f"Size : {arr.size}")
print(f"Shape : {arr.shape}")
print(f"Number of dimensions: {arr.ndim}")
print(f"Item size: {arr.itemsize}")

# Demonstrating array slicing
print("\nArray Slicing and Indexing:")
print(f"First 3 rows:\n{arr[:3]}")
print(f"Last 3 rows:\n{arr[-3:]}")
print(f"Every second element from rows 1 to 4:\n{arr[1:4:2]}")

# Positive and Negative Ending
if np.any(arr > 0):
    print("\nThere are positive numbers in the array!")
else:
    print("\nThere are no positive numbers in the array.")

if np.any(arr < 0):
    print("There are negative numbers in the array!")
else:
    print("There are no negative numbers in the array.")

import numpy as np


def demonstrate_numpy_functions():

    rows = int(input("Enter the number of rows: "))
    columns = int(input("Enter the number of columns: "))

    # Create np.zeros() array
    zeros_array = np.zeros((rows, columns), dtype=int)
    print("\nArray filled with zeros:")
    print(zeros_array)

    # Create np.ones() array
    ones_array = np.ones((rows, columns), dtype=int)
    print("\nArray filled with ones:")
    print(ones_array)


    start = int(input("\nEnter the start value for np.arange: "))
    stop = int(input("Enter the stop value for np.arange: "))
    step = int(input("Enter the step value for np.arange: "))


    range_array = np.arange(start, stop, step).reshape(-1, columns)
    print("\nArray created with np.arange():")
    print(range_array)


    print("\nProperties of the array filled with zeros:")
    print(f"Data type: {zeros_array.dtype}")
    print(f"Size : {zeros_array.size}")
    print(f"Shape : {zeros_array.shape}")
    print(f"Item size : {zeros_array.itemsize}")

    # Checking for positive and negative numbers
    if np.any(zeros_array > 0):
        print("\nThere are positive numbers in the array filled with zeros!")
    else:
        print("\nThere are no positive numbers in the array filled with zeros.")

    if np.any(zeros_array < 0):
        print("There are negative numbers in the array filled with zeros!")
    else:
        print("There are no negative numbers in the array filled with zeros.")

    if np.any(range_array > 0):
        print("\nThere are positive numbers in the array created with np.arange()!")
    else:
        print("\nThere are no positive numbers in the array created with np.arange().")

    if np.any(range_array < 0):
        print("There are negative numbers in the array created with np.arange()!")
    else:
        print("There are no negative numbers in the array created with np.arange().")

demonstrate_numpy_functions()





#array_operations_and_manipulation(
#Prime
def is_prime(num):
 if num <= 1:
 return False
 for i in range(2, int(num ** 0.5) + 1):
 if num % i == 0:
 return False
 return True
def main():
 num = int(input("Enter a number to check if it's prime: "))
 if is_prime(num):
 print(f"{num} is a prime number.")
 else:
 print(f"{num} is not a prime number.")
if __name__ == "__main__":
 main()
'''
#Palindrome
def is_palindrome(value):
 value = str(value)
 return value == value[::-1]
def main():

 value = input("Enter a string or number to check if it's a palindrome: ")

 if is_palindrome(value):
 print(f"'{value}' is a palindrome.")
 else:
 print(f"'{value}' is not a palindrome.")
if __name__ == "__main__":
 main()
